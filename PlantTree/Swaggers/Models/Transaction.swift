//
// Transaction.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** When created Transaction has a Pending state.   While it has Pending state it is considered as opened (waiting state).   Transaction can be closed with setting to Success or Failed state. */
open class Transaction: JSONEncodable {
    public enum Currency: String { 
        case euro = "euro"
        case dollar = "dollar"
        case ruble = "ruble"
    }
    public enum Status: String { 
        case success = "success"
        case pending = "pending"
        case fail = "fail"
    }
    public var id: Int32?
    public var userId: String?
    public var projectId: Int32?
    public var amount: Double?
    public var treeCount: Int32?
    public var currency: Currency?
    public var creationDate: Date?
    public var finishedDate: Date?
    public var status: Status?
    public var paymentMethod: String?
    public var projectTitle: String?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["id"] = self.id?.encodeToJSON()
        nillableDictionary["userId"] = self.userId
        nillableDictionary["projectId"] = self.projectId?.encodeToJSON()
        nillableDictionary["amount"] = self.amount
        nillableDictionary["treeCount"] = self.treeCount?.encodeToJSON()
        nillableDictionary["currency"] = self.currency?.rawValue
        nillableDictionary["creationDate"] = self.creationDate?.encodeToJSON()
        nillableDictionary["finishedDate"] = self.finishedDate?.encodeToJSON()
        nillableDictionary["status"] = self.status?.rawValue
        nillableDictionary["paymentMethod"] = self.paymentMethod
        nillableDictionary["projectTitle"] = self.projectTitle
        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
