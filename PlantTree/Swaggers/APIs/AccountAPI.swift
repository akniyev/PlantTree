//
// AccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class AccountAPI: APIBase {
    /**

     - parameter authorization: (header) Authorization header parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiAccountConfirmPost(authorization: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAccountConfirmPostWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /api/account/confirm
     
     - parameter authorization: (header) Authorization header parameter (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiAccountConfirmPostWithRequestBuilder(authorization: String? = nil) -> RequestBuilder<Void> {
        let path = "/api/account/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter email: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiAccountForgotByEmailPost(email: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAccountForgotByEmailPostWithRequestBuilder(email: email).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /api/account/forgot/{email}
     
     - parameter email: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiAccountForgotByEmailPostWithRequestBuilder(email: String) -> RequestBuilder<Void> {
        var path = "/api/account/forgot/{email}"
        path = path.replacingOccurrences(of: "{email}", with: "\(email)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter authorization: (header) Authorization header parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiAccountInfoGet(authorization: String? = nil, completion: @escaping ((_ data: DetailedUserInfo?,_ error: Error?) -> Void)) {
        apiAccountInfoGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/account/info
     - examples: [{contentType=application/json, example={
  "birthday" : "aeiou",
  "donated" : 1.3579000000000001069366817318950779736042022705078125,
  "lastName" : "aeiou",
  "photoUrl" : "aeiou",
  "gender" : "aeiou",
  "name" : "aeiou",
  "donatedProjectsCount" : 123,
  "transactions" : [ {
    "amount" : 1.3579000000000001069366817318950779736042022705078125,
    "paymentMethod" : "aeiou",
    "treeCount" : 123,
    "currency" : "aeiou",
    "id" : 123,
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "userId" : "aeiou",
    "projectId" : 123,
    "finishedDate" : "2000-01-23T04:56:07.000+00:00",
    "status" : "aeiou"
  } ],
  "email" : "aeiou",
  "isEmailConfirmed" : true,
  "photoUrlSmall" : "aeiou"
}}]
     
     - parameter authorization: (header) Authorization header parameter (optional)

     - returns: RequestBuilder<DetailedUserInfo> 
     */
    open class func apiAccountInfoGetWithRequestBuilder(authorization: String? = nil) -> RequestBuilder<DetailedUserInfo> {
        let path = "/api/account/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DetailedUserInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     DateTime format - \"dd.MM.yyyy\"
     
     - parameter info: (body)  (optional)
     - parameter authorization: (header) Authorization header parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiAccountInfoPut(info: UserInfo? = nil, authorization: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAccountInfoPutWithRequestBuilder(info: info, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     DateTime format - \"dd.MM.yyyy\"
     - PUT /api/account/info
     
     - parameter info: (body)  (optional)
     - parameter authorization: (header) Authorization header parameter (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiAccountInfoPutWithRequestBuilder(info: UserInfo? = nil, authorization: String? = nil) -> RequestBuilder<Void> {
        let path = "/api/account/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = info?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Changes password for local user.
     
     - parameter current: (path)  
     - parameter newpass: (path)  
     - parameter authorization: (header) Authorization header parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiAccountPasswordByCurrentByNewpassPut(current: String, newpass: String, authorization: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAccountPasswordByCurrentByNewpassPutWithRequestBuilder(current: current, newpass: newpass, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Changes password for local user.
     - PUT /api/account/password/{current}/{newpass}
     
     - parameter current: (path)  
     - parameter newpass: (path)  
     - parameter authorization: (header) Authorization header parameter (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiAccountPasswordByCurrentByNewpassPutWithRequestBuilder(current: String, newpass: String, authorization: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/account/password/{current}/{newpass}"
        path = path.replacingOccurrences(of: "{current}", with: "\(current)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{newpass}", with: "\(newpass)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Deletes current user photo
     
     - parameter authorization: (header) Authorization header parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiAccountPhotoDelete(authorization: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAccountPhotoDeleteWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Deletes current user photo
     - DELETE /api/account/photo
     
     - parameter authorization: (header) Authorization header parameter (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiAccountPhotoDeleteWithRequestBuilder(authorization: String? = nil) -> RequestBuilder<Void> {
        let path = "/api/account/photo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter photo: (form) Upload File 
     - parameter authorization: (header) Authorization header parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiAccountPhotoPost(photo: URL, authorization: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAccountPhotoPostWithRequestBuilder(photo: photo, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /api/account/photo
     
     - parameter photo: (form) Upload File 
     - parameter authorization: (header) Authorization header parameter (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiAccountPhotoPostWithRequestBuilder(photo: URL, authorization: String? = nil) -> RequestBuilder<Void> {
        let path = "/api/account/photo"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "photo": photo
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Accepts requests with Content-Type: application/json and body: {\"email\":\"my@my.ru\", \"password\": \"mypassword\"}
     
     - parameter registerInfo: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiAccountRegisterPost(registerInfo: RegisterModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAccountRegisterPostWithRequestBuilder(registerInfo: registerInfo).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Accepts requests with Content-Type: application/json and body: {\"email\":\"my@my.ru\", \"password\": \"mypassword\"}
     - POST /api/account/register
     
     - parameter registerInfo: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiAccountRegisterPostWithRequestBuilder(registerInfo: RegisterModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/account/register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = registerInfo?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
